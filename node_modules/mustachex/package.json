{
  "name": "mustachex",
  "version": "0.0.3",
  "description": "mustachex makes using the mustache templating engine in express really simple",
  "main": "mustachex.js",
  "keywords": [
    "mustache",
    "express",
    "template",
    "layout",
    "partial",
    "layout"
  ],
  "author": {
    "name": "Martin Rue"
  },
  "homepage": "https://github.com/martinrue/mustachex",
  "repository": {
    "type": "git",
    "url": "https://github.com/martinrue/mustachex.git"
  },
  "license": "BSD",
  "dependencies": {
    "mustache": "~0.7.2",
    "glob": "~3.2.1",
    "async": "~0.2.9",
    "underscore": "~1.4.4",
    "graceful-fs": "~2.0.3"
  },
  "devDependencies": {
    "jasmine-node": "~1.7.1",
    "express": "~3.2.5",
    "request": "~2.21.0"
  },
  "scripts": {
    "test": "./node_modules/jasmine-node/bin/jasmine-node --verbose spec --config test true"
  },
  "readme": "# mustachex\n\nmustachex makes using the [mustache](https://github.com/janl/mustache.js/) templating engine in [express](https://github.com/visionmedia/express) really simple.\n\n## Installation\n\n### npm\n```\nnpm install mustachex\n```\n\n### GitHub\n```\nnpm install https://github.com/martinrue/mustachex/tarball/master\n```\n\n## Usage\n\n### Register\nRegister mustachex as a view engine by calling `app.engine` and passing in `mustachex.express`:\n\n```javascript\napp.configure(function() {\n  app.engine('html', mustachex.express);\n  app.set('view engine', 'html');\n  app.set('views', __dirname + '/views');\n});\n```\n\n### Render\nCalling `res.render` will then render the named mustache template from the view directory set in express:\n\n```javascript\napp.get('/', function(req, res) {\n  res.render('index', { data: 'value' });\n});\n```\n\n### Partials\nBy default, mustachex loads all partials from the subdirectory named `partials` (and every subdirectory below) of the express `views` directory. This means that partials just work without any extra configuration required:\n\n**views/partials/hello.html**\n```html\n<div>Hello {{name}}</div>\n```\n\n**views/index.html**\n```html\n{{> hello}}\n```\n\n**app.js**\n```javascript\napp.get('/', function(req, res) {\n  res.render('index', { name: 'John' });\n});\n```\n\nTo load partials from a custom directory, call `mustachex.loadPartials` and pass the full path to a custom directory:\n\n```javascript\nmustachex.loadPartials(__dirname + '/views/custompartials');\n\napp.configure(function() {\n  app.engine('html', mustachex.express);\n  app.set('view engine', 'html');\n  app.set('views', __dirname + '/views');\n});\n```\n\n### Layout\nmustachex supports the concept of a layout template. Pass `{ layout: true }` or `{ layout: 'customfile' }` to `res.render` to specify that the template should use a layout template:\n\n**views/layout.html**\n```html\n<div>{{{body}}}</div>\n```\n\n**views/index.html**\n```html\nSome Content\n```\n\n**app.js**\n```javascript\napp.get('/', function(req, res) {\n  res.render('index', { layout: true });\n});\n```\n\nIf you always want mustachex to use a layout file, set the `layout` option in your express application and you'll no longer need to specify `{ layout: true }` in each `res.render` call:\n\n```javascript\napp.configure(function() {\n  app.engine('html', mustachex.express);\n  app.set('view engine', 'html');\n  app.set('views', __dirname + '/views');\n  app.set('layout', true);\n});\n\napp.get('/', function(req, res) {\n  // layout will be used\n  res.render('index');\n});\n```\n\nTurning layout off on a per-route basis can then be achieved by passing `{ layout: false }` to `res.render`.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/martinrue/mustachex/issues"
  },
  "_id": "mustachex@0.0.3",
  "_shasum": "7b2850a6cdbefa3bafc73072f6f0d645fc0594d9",
  "_from": "mustachex@",
  "_resolved": "https://registry.npmjs.org/mustachex/-/mustachex-0.0.3.tgz"
}
